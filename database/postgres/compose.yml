# docker-compose.yml

version: '3'
services:

  ################
  # postgrest-db - this is the core DB service #
  ################
  postgrest-db:
    container_name: postgrest-db
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_ANON_ROLE=${DB_ANON_ROLE}
      - DB_SCHEMA=${DB_SCHEMA}
    volumes:
      - "./pgdata:/var/lib/postgresql/data"
      # copy the script to create the anonymous user
      - "./initdb/create-anon-user.sql:/docker-entrypoint-initdb.d/create-anon-user.sql"
      # copy the script to create the schema + data 
      # - "./initdb/world.sql:/docker-entrypoint-initdb.d/world.sql"

    networks:
      - postgrest-backend
    restart: always

  #############
  # postgrest - this is the auto-generating API backend service #
  #############
  postgrest:
    container_name: postgrest
    image: postgrest/postgrest:latest
    ports:
      - "3000:3000"
    # Available environment variables documented here:
    # https://postgrest.org/en/latest/configuration.html#environment-variables
    environment:
      # The standard connection URI format, documented at
      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgrest-db:5432/${POSTGRES_DB}
      # The name of which database schema to expose to REST clients
      - PGRST_DB_SCHEMA=${DB_SCHEMA}
      # The database role to use when no client authentication is provided
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
      # Overrides the base URL used within the OpenAPI self-documentation hosted at the API root path
      - PGRST_OPENAPI_SERVER_PROXY_URI=http://localhost:3000
    networks:
      - postgrest-backend
    restart: always

  ##############
  # swagger-ui - this provides the automatic documentation #
  ##############
  swagger-ui:
    container_name: swagger-ui
    image: swaggerapi/swagger-ui:latest
    ports:
      - "8083:8080"
    environment:
      - API_URL=http://localhost:3000/
    labels:
      # This is enableing treafik to proxy this service
      - "traefik.enable=true"
      # Here we have to define the URL
      - "traefik.http.routers.swagger.rule=Host(`myproject.localhost`)"
      # Here we are defining wich entrypoint should be used by clients to access this service
      - "traefik.http.routers.swagger.entrypoints=web"
      # Here we define in wich network treafik can find this service
      - "traefik.docker.network=web"
      # This is the port that traefik should proxy
      - "traefik.http.services.swagger.loadbalancer.server.port=80"
    restart: always
    depends_on:
      - postgrest
      - postgrest-db
    networks:
      - web

volumes:
  pgdata:

networks:
  postgrest-backend:
    driver: bridge
  web:
    external: true